{
    "version": "https://jsonfeed.org/version/1",
    "title": "超算之路",
    "description": "记录从0开始的超算学习之路",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2024/09/16/%E8%B6%85%E7%AE%97%E7%9C%9F%E9%A2%98%E4%B8%80%EF%BC%9AOpenCAEPoro%E7%9A%84%E4%BC%98%E5%8C%96/",
            "url": "http://example.com/2024/09/16/%E8%B6%85%E7%AE%97%E7%9C%9F%E9%A2%98%E4%B8%80%EF%BC%9AOpenCAEPoro%E7%9A%84%E4%BC%98%E5%8C%96/",
            "title": "超算真题一：OpenCAEPoro的优化",
            "date_published": "2024-09-16T14:37:35.000Z",
            "content_html": "<h1 id=\"赛题编译\"><a href=\"#赛题编译\" class=\"headerlink\" title=\"赛题编译\"></a>赛题编译</h1><p>在正式开始之前，我尝试配置cuda、git等环境，但都因权限受限没有成功。于是这里直接使用原有的<strong>cuda_12.2</strong>以及windows本地的<strong>git bash</strong>，整个克隆、编译及优化过程都是通过 <strong>MobaXterm</strong> 完成的，这里也非常推荐大家使用这款免费且功能强大的远程终端控制软件。这也是我在个人博客网站利用 <strong>markdown</strong> 写的第一篇博客，欢迎大家留言讨论！</p>\n<h2 id=\"一、赛题克隆\"><a href=\"#一、赛题克隆\" class=\"headerlink\" title=\"一、赛题克隆\"></a>一、赛题克隆</h2><p>首先我们进入项目主页：<a href=\"https://github.com/OpenCAEPlus/OpenCAEPoro_ASC2024\">OpenCAEPoro for ASC 2024 </a>，之后进行下图选择复制该项目的URL。</p>\n<p><img loading=\"lazy\" data-src=\"D:\\HexoBlog\\blog\\source\\imgs\\OpenCAEPoro\\项目url.png\"></p>\n<p>完成后，在本地新建一个文件夹，并在此文件夹内启动 <strong>git bash</strong> 输入<code>git init</code>初始化项目，之后执行如下命令进行项目的克隆（克隆其他项目时只需要更换URL即可）：</p>\n<pre><code class=\"bash\">git clone https://github.com/OpenCAEPlus/OpenCAEPoro_ASC2024.git\n</code></pre>\n<p>克隆成功后如下图所示（PS：末尾加的<code>--depth 1</code>是为了加速 clone ，此项目无需历史版本及更新，因此可进行此操作加快克隆）</p>\n<p><img loading=\"lazy\" data-src=\"https://cdn.jsdelivr.net/gh/barbedcotton/BlogImage@main/img/%E5%85%8B%E9%9A%86%E6%88%90%E5%8A%9F.png\"></p>\n<h2 id=\"二、依赖安装及环境配置\"><a href=\"#二、依赖安装及环境配置\" class=\"headerlink\" title=\"二、依赖安装及环境配置\"></a>二、依赖安装及环境配置</h2><h3 id=\"（1）创建目录\"><a href=\"#（1）创建目录\" class=\"headerlink\" title=\"（1）创建目录\"></a>（1）创建目录</h3><p>首先我们在用户 home 目录下创建一个名为 <strong>OpenCAEPoro</strong> 的父文件夹，用于存储本项目的所有文件，并在此基础上下设两个子文件夹：<strong>libraries</strong> 用于存储依赖， <strong>src</strong> 用于存储源码（后续发现解压 OpenCAEPoro 后，其解压目录下自带 src 文件夹，故后续删除了父目录下的 src 文件夹。</p>\n<pre><code class=\"bash\">mkdir OpenCAEPoro &amp;&amp; cd OpenCAEPoro\nmkdir libraries src\n</code></pre>\n<p>之后通过 <strong>MobaXterm</strong> 将所需依赖移动到 <strong>libraries</strong> 下，OpenCAEPoro的安装包直接放在父文件夹下。然后来到 <strong>libraries</strong> 文件夹，依次解压依赖安装包以方便下面进行安装。 同时直接在 <strong>OpenCAEPoro</strong> 的父文件夹下解压OpenCAEPoro。</p>\n<pre><code class=\"bash\">tar zxvf hypre-2.28.0.tar.gz\ntar zxvf parmetis-4.0.3.tar.gz\ntar zxvf petsc_solver.tar.gz\ntar zxvf lapack-3.11.tar.gz\ntar zxvf petsc-3.19.3.tar.gz\ncd ..\ntar zxvf OpenCAEPoro.tar.gz \n</code></pre>\n<h3 id=\"（2）环境配置\"><a href=\"#（2）环境配置\" class=\"headerlink\" title=\"（2）环境配置\"></a>（2）环境配置</h3><h4 id=\"①oneapi2024-0的环境配置\"><a href=\"#①oneapi2024-0的环境配置\" class=\"headerlink\" title=\"①oneapi2024.0的环境配置\"></a>①oneapi2024.0的环境配置</h4><p><u>注：根据oneapi官网的<a href=\"https://www.intel.com/content/www/us/en/developer/articles/release-notes/oneapi-c-compiler-release-notes.html\">更新公告</a>, icc，icpc在2023.2月之后的版本被废弃，取而代之的是icx</u>。而服务器的MPI是2021版的，但是Compiler是2024版的,而MPI里面的程序用到了Compiler里的icc，于是这里不得不使用老版本的oneapi进行配置，请点此跳转：<a href=\"#%E2%91%A1oneapi2022.2%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE\">旧版本oneapi配置</a></p>\n<p>我的用户所在目录自带 <strong>cmake3.22.1</strong> ，所以这里主要进行 <strong>oneapi</strong> 的环境配置。其实这里不需要自己重新下载安装的，直接在服务器的根目录下找到 <strong>oneapi</strong> 的安装位置即可（绝大多数位置都是一样的）。</p>\n<pre><code class=\"bash\">cd /opt/intel/oneapi &amp;&amp; ls\n</code></pre>\n<p>执行上文指令后即可看到我们服务器配置了2024最新版的oneapi，其中的 <strong>setvars.sh</strong> 文件<strong>包含了所安装的所有oneAPI工具包的环境变量</strong>。确定好环境变量所在的位置，我们接下来进行配置即可。执行<code>vi ~/.bashrc</code>，并在文件末尾添加如下语句（将 <code>xxx</code> 改为你的用户名）</p>\n<pre><code class=\"bash\">source /opt/intel/oneapi/setvars.sh intel64\n</code></pre>\n<p>退出保存后再执行<code>source ~/.bashrc</code>使环境变量立即生效即可，之后执行如下指令进行环境测试。</p>\n<pre><code class=\"bash\">icx -v\ngdb-oneapi -v\n</code></pre>\n<p>如下图一样正常回显版本信息即为配置成功！</p>\n<p><img loading=\"lazy\" data-src=\"https://cdn.jsdelivr.net/gh/barbedcotton/BlogImage@main/img/image-20240921174711807.png\" alt=\"image-20240921174711807\"></p>\n<h4 id=\"②oneapi2022-2的环境配置\"><a href=\"#②oneapi2022-2的环境配置\" class=\"headerlink\" title=\"②oneapi2022.2的环境配置\"></a>②oneapi2022.2的环境配置</h4><p>首先执行以下命令进行安装包的下载及安装。</p>\n<pre><code class=\"bash\">wget https://registrationcenter-download.intel.com/akdlm/irc_nas/18679/l_HPCKit_p_2022.2.0.191_offline.sh\nsh l_HPCKit_p_2022.2.0.191_offline.sh\n</code></pre>\n<p>当然这里也可以直接先下载到本地，再直接传到服务器上进行安装。</p>\n<pre><code class=\"bash\">cd ~/intel/oneapi &amp;&amp; ls\n</code></pre>\n<p>执行以上指令后即可看到我们刚刚安装好的2022.2版本的oneapi，其中的 <strong>setvars.sh</strong> 文件<strong>包含了所安装的所有oneAPI工具包的环境变量</strong>。确定好环境变量所在的位置，我们接下来进行配置即可。执行<code>vi ~/.bashrc</code>，并在文件末尾添加如下语句（将 <code>xxx</code> 改为你的用户名）。</p>\n<pre><code class=\"bash\">source /home/xxx/intel/oneapi/setvars.sh intel64\n</code></pre>\n<p>退出保存后再执行<code>source ~/.bashrc</code>使环境变量立即生效即可，之后执行如下指令进行环境测试。</p>\n<pre><code class=\"bash\">icx -v\ngdb-oneapi -v\n</code></pre>\n<p>如下图一样正常回显版本信息即为配置成功！</p>\n<p><img loading=\"lazy\" data-src=\"https://cdn.jsdelivr.net/gh/barbedcotton/BlogImage@main/img/image-20240921204248392.png\" alt=\"image-20240921204248392\"></p>\n<h3 id=\"（3）依赖安装\"><a href=\"#（3）依赖安装\" class=\"headerlink\" title=\"（3）依赖安装\"></a>（3）依赖安装</h3><h4 id=\"①lapack安装\"><a href=\"#①lapack安装\" class=\"headerlink\" title=\"①lapack安装\"></a>①lapack安装</h4><p>执行以下指令进入解压后的文件夹并安装。</p>\n<pre><code class=\"bash\">cd lapack-3.11\nmake blaslib\nmake cblaslib\nmake lapacklib\nmake lapackelib\n</code></pre>\n<h4 id=\"②parmetis安装\"><a href=\"#②parmetis安装\" class=\"headerlink\" title=\"②parmetis安装\"></a>②parmetis安装</h4><p>执行以下指令进入解压后的文件夹并安装。</p>\n<pre><code class=\"bash\">cd parmetis-4.0.3\nvim build-parmetis.sh\n#进入编辑模式后，将下方代码进行修改并保存退出\nmake configcc=mpiicc prefix=ROOT_DIR/parmetis-4.0.3/parmetis-install #修改“build-parmetis.sh”脚本的安装路径\n#其中 ROOT_DIR 是存储库的根目录，可根据自己实际的目录设置（下同）\nsh build-parmetis.sh\n</code></pre>\n<h4 id=\"③hypre安装\"><a href=\"#③hypre安装\" class=\"headerlink\" title=\"③hypre安装\"></a>③hypre安装</h4><p>执行以下指令进入解压后的文件夹并安装。</p>\n<pre><code class=\"bash\">cd hypre-2.28.0\nvim build-hypre.sh\n#进入编辑模式后，将下方代码进行修改并保存退出\n./configure --prefix=ROOT_DIR/hypre-2.28.0/install --with-MPI --enable-shared\n###\nsh build-hypre.sh\n</code></pre>\n<h4 id=\"④petsc安装\"><a href=\"#④petsc安装\" class=\"headerlink\" title=\"④petsc安装\"></a>④petsc安装</h4><p>执行以下指令进入解压后的文件夹并安装。</p>\n<pre><code class=\"bash\">cd petsc-3.19.3\nvim build-petsc.sh \n#进入编辑模式后，将下方代码进行修改并保存退出\n###\nexport PETSC_DIR=ROOT_DIR/petsc-3.19.3\nexport PETSC_ARCH=petsc_install\n./configure CC=mpiicc CXX=mpiicpc \\\n--with-fortran-bindings=0 \\\n--with-hypre-dir=ROOT_DIR/hypre-2.28.0/install \\\n--with-debugging=0 \\\nCOPTFLAGS=&quot;-O3&quot; \\\nCXXOPTFLAGS=&quot;-O3&quot; \\\nmake -j 20 PETSC_DIR=ROOT_DIR/petsc-3.19.3 PETSC_ARCH=petsc_install all\n###\nsh build-petsc.sh\n</code></pre>\n<h4 id=\"⑤petsc-solver安装\"><a href=\"#⑤petsc-solver安装\" class=\"headerlink\" title=\"⑤petsc_solver安装\"></a>⑤petsc_solver安装</h4><p>执行以下指令进入解压后的文件夹并安装。</p>\n<pre><code class=\"bash\">cd petsc_solver\nvim build-petscsolver.sh\n#进入编辑模式后，将下方代码进行修改并保存退出\n###\nexport CPATH=ROOT_DIR/lapack-3.11/CBLAS/include:ROOT_DIR/lapack-3.11/LAPACKE/include:$CPATH\nexport LD_LIBRARY_PATH=ROOT_DIR/lapack-3.11:$LD_LIBRARY_PATH\n###\nvim CMakeLists.txt\n#进入编辑模式后，将下方代码进行修改并保存退出\n###\nset(PETSC_DIR &quot;ROOT_DIR/petsc-3.19.3/&quot;)\nset(PETSC_ARCH &quot;petsc_install&quot;)\n###\nsh build-petscsolver.sh\n</code></pre>\n<h2 id=\"三、OpenCAEPoro的安装与运行\"><a href=\"#三、OpenCAEPoro的安装与运行\" class=\"headerlink\" title=\"三、OpenCAEPoro的安装与运行\"></a>三、OpenCAEPoro的安装与运行</h2><h3 id=\"（1）OpenCAEPoro的安装\"><a href=\"#（1）OpenCAEPoro的安装\" class=\"headerlink\" title=\"（1）OpenCAEPoro的安装\"></a>（1）OpenCAEPoro的安装</h3><p>执行以下指令进入解压后的文件夹并安装。</p>\n<pre><code class=\"bash\">cd OpenCAEPoro\nvim mpi-build-petsc.sh\n#进入编辑模式后，将下方代码进行修改并保存退出\n###\nexport PARMETIS_DIR=ROOT_DIR/parmetis-4.0.3\nexport PARMETIS_BUILD_DIR=ROOT_DIR/parmetis-4.0.3/build/Linux-x86_64\nexport METIS_DIR=ROOT_DIR/parmetis-4.0.3/metis\nexport METIS_BUILD_DIR=ROOT_DIR/parmetis-4.0.3/build/Linux-x86_64\nexport PETSC_DIR=ROOT_DIR/petsc-3.19.3\nexport PETSC_ARCH=petsc_install\nexport PETSCSOLVER_DIR=ROOT_DIR/petsc_solver\nexport CPATH=ROOT_DIR/petsc-3.19.3/include/:$CPATH\nexport CPATH=ROOT_DIR/petsc-3.19.3/petsc_install/include/:ROOT_DIR/parmetis-4.0.3/metis/include:\nROOT_DIR/parmetis-4.0.3/include:$CPATH\nexport CPATH=ROOT_DIR/lapack-3.11/CBLAS/include/:$CPATH\n###\nsh mpi-build-petsc.sh\n</code></pre>\n<h3 id=\"（2）OpenCAEPoro的运行\"><a href=\"#（2）OpenCAEPoro的运行\" class=\"headerlink\" title=\"（2）OpenCAEPoro的运行\"></a>（2）OpenCAEPoro的运行</h3><p>继续在此目录下运行<code>mpirun -np &lt;core_num&gt; ./testOpenCAEPoro ./data/case1 verbose=1</code>进行运行测试（<core_num>为<strong>进程数</strong>，可自行指定）。这里为了体现优化前后的差异度，我将进程数设为8。</p>\n<p><img loading=\"lazy\" data-src=\"https://cdn.jsdelivr.net/gh/barbedcotton/BlogImage@main/img/image-20240926100711674.png\" alt=\"image-20240926100711674\"></p>\n<p><img loading=\"lazy\" data-src=\"https://cdn.jsdelivr.net/gh/barbedcotton/BlogImage@main/img/image-20240926100754075.png\" alt=\"image-20240926100754075\"></p>\n<p><img loading=\"lazy\" data-src=\"https://cdn.jsdelivr.net/gh/barbedcotton/BlogImage@main/img/image-20240926100831459.png\" alt=\"image-20240926100831459\"></p>\n<h2 id=\"四、\"><a href=\"#四、\" class=\"headerlink\" title=\"四、\"></a>四、</h2>",
            "tags": []
        },
        {
            "id": "http://example.com/2024/09/08/Linux%E5%9F%BA%E7%A1%80%EF%BC%881%EF%BC%89%EF%BC%9Avim%E7%A8%8B%E5%BA%8F%E7%BC%96%E8%BE%91%E5%99%A8/",
            "url": "http://example.com/2024/09/08/Linux%E5%9F%BA%E7%A1%80%EF%BC%881%EF%BC%89%EF%BC%9Avim%E7%A8%8B%E5%BA%8F%E7%BC%96%E8%BE%91%E5%99%A8/",
            "title": "Linux基础（1）：vim程序编辑器",
            "date_published": "2024-09-08T15:13:23.000Z",
            "content_html": "<p>Linux的熟练应用对高性能计算领域而言是非常重要的，由于博主已自学过一点点Linux的基本命令，故本文将直接从vim程序编辑器开始记录学习，在学习的过程中夯实基本命令。在此，也默认虚拟机等必要环境都已配备完毕，接下来我将以VMware虚拟机环境下的CentOS 7系统为例，并搭配MobaXterm远程计算工具箱进行学习。本博客的参考资料为鸟哥的《Linux私房菜：基础版》以及黑马程序员的Linux课程笔记（主要用于基本命令的查阅）。</p>\n<h1 id=\"vim程序编辑器\"><a href=\"#vim程序编辑器\" class=\"headerlink\" title=\"vim程序编辑器\"></a>vim程序编辑器</h1><h2 id=\"三种工作模式\"><a href=\"#三种工作模式\" class=\"headerlink\" title=\"三种工作模式\"></a>三种工作模式</h2><p>我们将以test.txt文件为例，介绍vi的三种模式，首先我们进入文档文件夹，新建一个test.txt的文件。</p>\n<p><img loading=\"lazy\" data-src=\"https://i-blog.csdnimg.cn/direct/af908313fe0a4148820cdb32a147f2da.png\"></p>\n<p>①指令模式（command mode）</p>\n<p>默认模式，左下角会显示文件名，以及文本行数和字符数，可以进行复制粘贴、删除内容，通过键盘移动光标等操作。</p>\n<p><img loading=\"lazy\" data-src=\"https://i-blog.csdnimg.cn/direct/99251ac59eca428abb96fd3764bcc4ab.png\"></p>\n<p>②编辑模式 （insert mode）</p>\n<p>按下特定字母后，会进入编辑模式，此时，左下角显示”–INSERT–”，相关特定字母对应的操作如下表所示，按ESC即可退出到指令模式。</p>\n<p><img loading=\"lazy\" data-src=\"https://i-blog.csdnimg.cn/direct/8ee8245adc0549fa93e9f9a4b25cc49f.png\"></p>\n<p><strong>命令</strong></p>\n<p><strong>描述</strong></p>\n<p>i</p>\n<p>在当前光标位置进入输入模式</p>\n<p>I</p>\n<p>在当前行的开头进入输入模式</p>\n<p>a</p>\n<p>在当前光标位置之后进入输入模式</p>\n<p>A</p>\n<p>在当前行的结尾进入输入模式</p>\n<p>o</p>\n<p>在当前光标下一行进入输入模式</p>\n<p>O</p>\n<p>在当前光标上一行进入输入模式</p>\n<p>③命令行模式 （command-line mode）</p>\n<p>在<strong>指令模式</strong>下，输入”&#x2F;:?””三个中的任何一个字符，即可进入命令行模式，完成读取、储存等额外功能，此处以”:wq”为例，展示其保存退出并保存的功能。</p>\n<p><img loading=\"lazy\" data-src=\"https://i-blog.csdnimg.cn/direct/0e35cef109284f7cbc1ca8260f50a215.png\"></p>\n<p><img loading=\"lazy\" data-src=\"https://i-blog.csdnimg.cn/direct/a16bc1ed0929467a8f3ce4823ededa2d.png\"></p>\n<p>至此，vi的三种模式已全部介绍完毕，更多按键功能表请自行查阅~</p>\n<h2 id=\"vim的暂存功能\"><a href=\"#vim的暂存功能\" class=\"headerlink\" title=\"vim的暂存功能\"></a>vim的暂存功能</h2><p>使用vim编辑文件实际是先copy一份临时文件并映射到内存给你编辑，编辑的是临时文件。当多用户同时编译或vim因不明原因发生中断时，暂存档将不会消失，它会以隐藏文件的形式存入当前文件夹，输入ll -a即可查看。</p>\n<p><img loading=\"lazy\" data-src=\"https://i-blog.csdnimg.cn/direct/5fb92213bf874e7eb2fd6949174df886.png\"></p>\n<p>ps:原本以为vi也有暂存功能，看到后面才知道，原来目前大部分的 distributions 都以 vim 取代 vi 的功能了（&#x2F;捂脸）</p>\n<p><img loading=\"lazy\" data-src=\"https://i-blog.csdnimg.cn/direct/75f5185f2d6043e6bdfb06825d4b825f.png\"></p>\n<h2 id=\"vim的额外功能\"><a href=\"#vim的额外功能\" class=\"headerlink\" title=\"vim的额外功能\"></a>vim的额外功能</h2><h3 id=\"区块选择\"><a href=\"#区块选择\" class=\"headerlink\" title=\"区块选择\"></a>区块选择</h3><p>下图是一个动物园区域规划，动物园分为三个区域，位于同一个区域的不同动物要分居左右两侧，现在想要实现在红框中标明这些动物在哪个区域，要怎么办呢？</p>\n<p><img loading=\"lazy\" data-src=\"https://i-blog.csdnimg.cn/direct/ada688c85042437dbf1a5d302498647f.png\"></p>\n<p>没错，这便要用到区块选择的功能，其对应的功能表如下图所示：</p>\n<p><img loading=\"lazy\" data-src=\"https://i-blog.csdnimg.cn/direct/290e49bf9bb1483a8af95b21c384122d.png\"></p>\n<p> 按下ctrl+v左下角出现”– VISUAL BLOCK –”字样，通过<strong>键盘移动光标</strong>选中区块，按y复制，再通过编辑模式输入空格移动光标至指定位置后，回到指令模式按p粘贴即可。</p>\n<p>​      <img loading=\"lazy\" data-src=\"https://i-blog.csdnimg.cn/direct/267c7908deea4949ba6740b1418be7e3.png\">                    <img loading=\"lazy\" data-src=\"https://i-blog.csdnimg.cn/direct/9fabc642a312491ba35fdf073fe70f92.png\"></p>\n<h3 id=\"多文件编辑\"><a href=\"#多文件编辑\" class=\"headerlink\" title=\"多文件编辑\"></a>多文件编辑</h3><p>先通过vim animal food指令打开两个文件，分别为动物园区域规划和喂养动物所匹配的食物，现在要在food文件中，实现每一种食物都与animal文件中的动物相匹配。</p>\n<p><img loading=\"lazy\" data-src=\"https://i-blog.csdnimg.cn/direct/9ab0fd6dcd2e4175a4cc333001812da9.png\"></p>\n<p>在命令行模式下输入:files可以看到我们已经打开了两个文件，其中animal文件正在被编辑（%a），按任意键可返回指令模式。</p>\n<p> 之后把光标移动至第一行第一列，直接输入11yy复制前11列（这里鸟哥的教参出错了，<strong>nyy是复制n行，不是n列，</strong>推荐使用区块选择功能），再输入:n进入下一个文件，即food文件，指令模式下输入$（这里也是，鸟哥的教参用的是G，<strong>G指令是移动到最后一行，而不是最后一列</strong>），将光标移动至最后一列（可有可无，也可以直接进入编辑模式操作，还能加俩空格更好看，只是这样更快捷），输入p完成粘贴。（以上出错内容位于教参的P473）</p>\n<p><img loading=\"lazy\" data-src=\"https://i-blog.csdnimg.cn/direct/0f4855d527a549f087879cbe7a062ab8.png\"></p>\n<h3 id=\"多窗口功能\"><a href=\"#多窗口功能\" class=\"headerlink\" title=\"多窗口功能\"></a>多窗口功能</h3><p> 主要是用于方便前后对照使用，如下图sudoers文件中，可以实现连续阅读（找不到合适的文件进行说明，单单这功能的话还是比较鸡肋的，毕竟单窗口也能解决），主要还是用于后面需要前面的数据支撑，进行查阅使用。</p>\n<p><img loading=\"lazy\" data-src=\"https://i-blog.csdnimg.cn/direct/a875551ac7344b428c9f8d5e61d8ce44.png\"></p>\n<p>其具体的操作不再赘述，详细功能表如下图所示：</p>\n<p><img loading=\"lazy\" data-src=\"https://i-blog.csdnimg.cn/direct/244212c508d646b897a83faf46599f03.png\"></p>\n<h4 id=\"挑字补全功能\"><a href=\"#挑字补全功能\" class=\"headerlink\" title=\"挑字补全功能\"></a>挑字补全功能</h4><p> 其功能表如下图所示，因bash自带补全一键补全功能，在此不再赘述O(∩_∩)O~~</p>\n<p><img loading=\"lazy\" data-src=\"https://i-blog.csdnimg.cn/direct/8e6472fb2a914318a2f5e1806e1ecaa0.png\"></p>\n",
            "tags": [
                "Linux",
                "vim程序编辑器",
                "高性能计算"
            ]
        }
    ]
}