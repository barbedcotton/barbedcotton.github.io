<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>超算之路</title>
    <link href="http://example.com" />
    <updated>2024-09-16T14:37:35.000Z</updated>
    <category term="Linux" />
    <category term="vim程序编辑器" />
    <category term="高性能计算" />
    <entry>
        <id>http://example.com/2024/09/16/%E8%B6%85%E7%AE%97%E7%9C%9F%E9%A2%98%E4%B8%80%EF%BC%9AOpenCAEPoro%E7%9A%84%E4%BC%98%E5%8C%96/</id>
        <title>超算真题一：OpenCAEPoro的优化</title>
        <link rel="alternate" href="http://example.com/2024/09/16/%E8%B6%85%E7%AE%97%E7%9C%9F%E9%A2%98%E4%B8%80%EF%BC%9AOpenCAEPoro%E7%9A%84%E4%BC%98%E5%8C%96/"/>
        <content type="html">&lt;h1 id=&#34;赛题编译&#34;&gt;&lt;a href=&#34;#赛题编译&#34; class=&#34;headerlink&#34; title=&#34;赛题编译&#34;&gt;&lt;/a&gt;赛题编译&lt;/h1&gt;&lt;p&gt;在正式开始之前，我尝试配置cuda、git等环境，但都因权限受限没有成功。于是这里直接使用原有的&lt;strong&gt;cuda_12.2&lt;/strong&gt;以及windows本地的&lt;strong&gt;git bash&lt;/strong&gt;，整个克隆、编译及优化过程都是通过 &lt;strong&gt;MobaXterm&lt;/strong&gt; 完成的，这里也非常推荐大家使用这款免费且功能强大的远程终端控制软件。这也是我在个人博客网站利用 &lt;strong&gt;markdown&lt;/strong&gt; 写的第一篇博客，欢迎大家留言讨论！&lt;/p&gt;
&lt;h2 id=&#34;一、赛题克隆&#34;&gt;&lt;a href=&#34;#一、赛题克隆&#34; class=&#34;headerlink&#34; title=&#34;一、赛题克隆&#34;&gt;&lt;/a&gt;一、赛题克隆&lt;/h2&gt;&lt;p&gt;首先我们进入项目主页：&lt;a href=&#34;https://github.com/OpenCAEPlus/OpenCAEPoro_ASC2024&#34;&gt;OpenCAEPoro for ASC 2024 &lt;/a&gt;，之后进行下图选择复制该项目的URL。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;D:\HexoBlog\blog\source\imgs\OpenCAEPoro\项目url.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;完成后，在本地新建一个文件夹，并在此文件夹内启动 &lt;strong&gt;git bash&lt;/strong&gt; 输入&lt;code&gt;git init&lt;/code&gt;初始化项目，之后执行如下命令进行项目的克隆（克隆其他项目时只需要更换URL即可）：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;git clone https://github.com/OpenCAEPlus/OpenCAEPoro_ASC2024.git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;克隆成功后如下图所示（PS：末尾加的&lt;code&gt;--depth 1&lt;/code&gt;是为了加速 clone ，此项目无需历史版本及更新，因此可进行此操作加快克隆）&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://cdn.jsdelivr.net/gh/barbedcotton/BlogImage@main/img/%E5%85%8B%E9%9A%86%E6%88%90%E5%8A%9F.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;二、依赖安装及环境配置&#34;&gt;&lt;a href=&#34;#二、依赖安装及环境配置&#34; class=&#34;headerlink&#34; title=&#34;二、依赖安装及环境配置&#34;&gt;&lt;/a&gt;二、依赖安装及环境配置&lt;/h2&gt;&lt;h3 id=&#34;（1）创建目录&#34;&gt;&lt;a href=&#34;#（1）创建目录&#34; class=&#34;headerlink&#34; title=&#34;（1）创建目录&#34;&gt;&lt;/a&gt;（1）创建目录&lt;/h3&gt;&lt;p&gt;首先我们在用户 home 目录下创建一个名为 &lt;strong&gt;OpenCAEPoro&lt;/strong&gt; 的父文件夹，用于存储本项目的所有文件，并在此基础上下设两个子文件夹：&lt;strong&gt;libraries&lt;/strong&gt; 用于存储依赖， &lt;strong&gt;src&lt;/strong&gt; 用于存储源码（后续发现解压 OpenCAEPoro 后，其解压目录下自带 src 文件夹，故后续删除了父目录下的 src 文件夹。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;mkdir OpenCAEPoro &amp;amp;&amp;amp; cd OpenCAEPoro
mkdir libraries src
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;之后通过 &lt;strong&gt;MobaXterm&lt;/strong&gt; 将所需依赖移动到 &lt;strong&gt;libraries&lt;/strong&gt; 下，OpenCAEPoro的安装包直接放在父文件夹下。然后来到 &lt;strong&gt;libraries&lt;/strong&gt; 文件夹，依次解压依赖安装包以方便下面进行安装。 同时直接在 &lt;strong&gt;OpenCAEPoro&lt;/strong&gt; 的父文件夹下解压OpenCAEPoro。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;tar zxvf hypre-2.28.0.tar.gz
tar zxvf parmetis-4.0.3.tar.gz
tar zxvf petsc_solver.tar.gz
tar zxvf lapack-3.11.tar.gz
tar zxvf petsc-3.19.3.tar.gz
cd ..
tar zxvf OpenCAEPoro.tar.gz 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;（2）环境配置&#34;&gt;&lt;a href=&#34;#（2）环境配置&#34; class=&#34;headerlink&#34; title=&#34;（2）环境配置&#34;&gt;&lt;/a&gt;（2）环境配置&lt;/h3&gt;&lt;h4 id=&#34;①oneapi2024-0的环境配置&#34;&gt;&lt;a href=&#34;#①oneapi2024-0的环境配置&#34; class=&#34;headerlink&#34; title=&#34;①oneapi2024.0的环境配置&#34;&gt;&lt;/a&gt;①oneapi2024.0的环境配置&lt;/h4&gt;&lt;p&gt;&lt;u&gt;注：根据oneapi官网的&lt;a href=&#34;https://www.intel.com/content/www/us/en/developer/articles/release-notes/oneapi-c-compiler-release-notes.html&#34;&gt;更新公告&lt;/a&gt;, icc，icpc在2023.2月之后的版本被废弃，取而代之的是icx&lt;/u&gt;。而服务器的MPI是2021版的，但是Compiler是2024版的,而MPI里面的程序用到了Compiler里的icc，于是这里不得不使用老版本的oneapi进行配置，请点此跳转：&lt;a href=&#34;#%E2%91%A1oneapi2022.2%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE&#34;&gt;旧版本oneapi配置&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我的用户所在目录自带 &lt;strong&gt;cmake3.22.1&lt;/strong&gt; ，所以这里主要进行 &lt;strong&gt;oneapi&lt;/strong&gt; 的环境配置。其实这里不需要自己重新下载安装的，直接在服务器的根目录下找到 &lt;strong&gt;oneapi&lt;/strong&gt; 的安装位置即可（绝大多数位置都是一样的）。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;cd /opt/intel/oneapi &amp;amp;&amp;amp; ls
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;执行上文指令后即可看到我们服务器配置了2024最新版的oneapi，其中的 &lt;strong&gt;setvars.sh&lt;/strong&gt; 文件&lt;strong&gt;包含了所安装的所有oneAPI工具包的环境变量&lt;/strong&gt;。确定好环境变量所在的位置，我们接下来进行配置即可。执行&lt;code&gt;vi ~/.bashrc&lt;/code&gt;，并在文件末尾添加如下语句（将 &lt;code&gt;xxx&lt;/code&gt; 改为你的用户名）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;source /opt/intel/oneapi/setvars.sh intel64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;退出保存后再执行&lt;code&gt;source ~/.bashrc&lt;/code&gt;使环境变量立即生效即可，之后执行如下指令进行环境测试。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;icx -v
gdb-oneapi -v
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如下图一样正常回显版本信息即为配置成功！&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://cdn.jsdelivr.net/gh/barbedcotton/BlogImage@main/img/image-20240921174711807.png&#34; alt=&#34;image-20240921174711807&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;②oneapi2022-2的环境配置&#34;&gt;&lt;a href=&#34;#②oneapi2022-2的环境配置&#34; class=&#34;headerlink&#34; title=&#34;②oneapi2022.2的环境配置&#34;&gt;&lt;/a&gt;②oneapi2022.2的环境配置&lt;/h4&gt;&lt;p&gt;首先执行以下命令进行安装包的下载及安装。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;wget https://registrationcenter-download.intel.com/akdlm/irc_nas/18679/l_HPCKit_p_2022.2.0.191_offline.sh
sh l_HPCKit_p_2022.2.0.191_offline.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当然这里也可以直接先下载到本地，再直接传到服务器上进行安装。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;cd ~/intel/oneapi &amp;amp;&amp;amp; ls
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;执行以上指令后即可看到我们刚刚安装好的2022.2版本的oneapi，其中的 &lt;strong&gt;setvars.sh&lt;/strong&gt; 文件&lt;strong&gt;包含了所安装的所有oneAPI工具包的环境变量&lt;/strong&gt;。确定好环境变量所在的位置，我们接下来进行配置即可。执行&lt;code&gt;vi ~/.bashrc&lt;/code&gt;，并在文件末尾添加如下语句（将 &lt;code&gt;xxx&lt;/code&gt; 改为你的用户名）。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;source /home/xxx/intel/oneapi/setvars.sh intel64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;退出保存后再执行&lt;code&gt;source ~/.bashrc&lt;/code&gt;使环境变量立即生效即可，之后执行如下指令进行环境测试。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;icx -v
gdb-oneapi -v
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如下图一样正常回显版本信息即为配置成功！&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://cdn.jsdelivr.net/gh/barbedcotton/BlogImage@main/img/image-20240921204248392.png&#34; alt=&#34;image-20240921204248392&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;（3）依赖安装&#34;&gt;&lt;a href=&#34;#（3）依赖安装&#34; class=&#34;headerlink&#34; title=&#34;（3）依赖安装&#34;&gt;&lt;/a&gt;（3）依赖安装&lt;/h3&gt;&lt;h4 id=&#34;①lapack安装&#34;&gt;&lt;a href=&#34;#①lapack安装&#34; class=&#34;headerlink&#34; title=&#34;①lapack安装&#34;&gt;&lt;/a&gt;①lapack安装&lt;/h4&gt;&lt;p&gt;执行以下指令进入解压后的文件夹并安装。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;cd lapack-3.11
make blaslib
make cblaslib
make lapacklib
make lapackelib
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;②parmetis安装&#34;&gt;&lt;a href=&#34;#②parmetis安装&#34; class=&#34;headerlink&#34; title=&#34;②parmetis安装&#34;&gt;&lt;/a&gt;②parmetis安装&lt;/h4&gt;&lt;p&gt;执行以下指令进入解压后的文件夹并安装。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;cd parmetis-4.0.3
vim build-parmetis.sh
#进入编辑模式后，将下方代码进行修改并保存退出
make configcc=mpiicc prefix=ROOT_DIR/parmetis-4.0.3/parmetis-install #修改“build-parmetis.sh”脚本的安装路径
#其中 ROOT_DIR 是存储库的根目录，可根据自己实际的目录设置（下同）
sh build-parmetis.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;③hypre安装&#34;&gt;&lt;a href=&#34;#③hypre安装&#34; class=&#34;headerlink&#34; title=&#34;③hypre安装&#34;&gt;&lt;/a&gt;③hypre安装&lt;/h4&gt;&lt;p&gt;执行以下指令进入解压后的文件夹并安装。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;cd hypre-2.28.0
vim build-hypre.sh
#进入编辑模式后，将下方代码进行修改并保存退出
./configure --prefix=ROOT_DIR/hypre-2.28.0/install --with-MPI --enable-shared
###
sh build-hypre.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;④petsc安装&#34;&gt;&lt;a href=&#34;#④petsc安装&#34; class=&#34;headerlink&#34; title=&#34;④petsc安装&#34;&gt;&lt;/a&gt;④petsc安装&lt;/h4&gt;&lt;p&gt;执行以下指令进入解压后的文件夹并安装。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;cd petsc-3.19.3
vim build-petsc.sh 
#进入编辑模式后，将下方代码进行修改并保存退出
###
export PETSC_DIR=ROOT_DIR/petsc-3.19.3
export PETSC_ARCH=petsc_install
./configure CC=mpiicc CXX=mpiicpc \
--with-fortran-bindings=0 \
--with-hypre-dir=ROOT_DIR/hypre-2.28.0/install \
--with-debugging=0 \
COPTFLAGS=&amp;quot;-O3&amp;quot; \
CXXOPTFLAGS=&amp;quot;-O3&amp;quot; \
make -j 20 PETSC_DIR=ROOT_DIR/petsc-3.19.3 PETSC_ARCH=petsc_install all
###
sh build-petsc.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;⑤petsc-solver安装&#34;&gt;&lt;a href=&#34;#⑤petsc-solver安装&#34; class=&#34;headerlink&#34; title=&#34;⑤petsc_solver安装&#34;&gt;&lt;/a&gt;⑤petsc_solver安装&lt;/h4&gt;&lt;p&gt;执行以下指令进入解压后的文件夹并安装。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;cd petsc_solver
vim build-petscsolver.sh
#进入编辑模式后，将下方代码进行修改并保存退出
###
export CPATH=ROOT_DIR/lapack-3.11/CBLAS/include:ROOT_DIR/lapack-3.11/LAPACKE/include:$CPATH
export LD_LIBRARY_PATH=ROOT_DIR/lapack-3.11:$LD_LIBRARY_PATH
###
vim CMakeLists.txt
#进入编辑模式后，将下方代码进行修改并保存退出
###
set(PETSC_DIR &amp;quot;ROOT_DIR/petsc-3.19.3/&amp;quot;)
set(PETSC_ARCH &amp;quot;petsc_install&amp;quot;)
###
sh build-petscsolver.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;三、OpenCAEPoro的安装与运行&#34;&gt;&lt;a href=&#34;#三、OpenCAEPoro的安装与运行&#34; class=&#34;headerlink&#34; title=&#34;三、OpenCAEPoro的安装与运行&#34;&gt;&lt;/a&gt;三、OpenCAEPoro的安装与运行&lt;/h2&gt;&lt;h3 id=&#34;（1）OpenCAEPoro的安装&#34;&gt;&lt;a href=&#34;#（1）OpenCAEPoro的安装&#34; class=&#34;headerlink&#34; title=&#34;（1）OpenCAEPoro的安装&#34;&gt;&lt;/a&gt;（1）OpenCAEPoro的安装&lt;/h3&gt;&lt;p&gt;执行以下指令进入解压后的文件夹并安装。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;cd OpenCAEPoro
vim mpi-build-petsc.sh
#进入编辑模式后，将下方代码进行修改并保存退出
###
export PARMETIS_DIR=ROOT_DIR/parmetis-4.0.3
export PARMETIS_BUILD_DIR=ROOT_DIR/parmetis-4.0.3/build/Linux-x86_64
export METIS_DIR=ROOT_DIR/parmetis-4.0.3/metis
export METIS_BUILD_DIR=ROOT_DIR/parmetis-4.0.3/build/Linux-x86_64
export PETSC_DIR=ROOT_DIR/petsc-3.19.3
export PETSC_ARCH=petsc_install
export PETSCSOLVER_DIR=ROOT_DIR/petsc_solver
export CPATH=ROOT_DIR/petsc-3.19.3/include/:$CPATH
export CPATH=ROOT_DIR/petsc-3.19.3/petsc_install/include/:ROOT_DIR/parmetis-4.0.3/metis/include:
ROOT_DIR/parmetis-4.0.3/include:$CPATH
export CPATH=ROOT_DIR/lapack-3.11/CBLAS/include/:$CPATH
###
sh mpi-build-petsc.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;（2）OpenCAEPoro的运行&#34;&gt;&lt;a href=&#34;#（2）OpenCAEPoro的运行&#34; class=&#34;headerlink&#34; title=&#34;（2）OpenCAEPoro的运行&#34;&gt;&lt;/a&gt;（2）OpenCAEPoro的运行&lt;/h3&gt;&lt;p&gt;继续在此目录下运行&lt;code&gt;mpirun -np &amp;lt;core_num&amp;gt; ./testOpenCAEPoro ./data/case1 verbose=1&lt;/code&gt;进行运行测试（&lt;core_num&gt;为&lt;strong&gt;进程数&lt;/strong&gt;，可自行指定）。这里为了体现优化前后的差异度，我将进程数设为8。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://cdn.jsdelivr.net/gh/barbedcotton/BlogImage@main/img/image-20240926100711674.png&#34; alt=&#34;image-20240926100711674&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://cdn.jsdelivr.net/gh/barbedcotton/BlogImage@main/img/image-20240926100754075.png&#34; alt=&#34;image-20240926100754075&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://cdn.jsdelivr.net/gh/barbedcotton/BlogImage@main/img/image-20240926100831459.png&#34; alt=&#34;image-20240926100831459&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;四、&#34;&gt;&lt;a href=&#34;#四、&#34; class=&#34;headerlink&#34; title=&#34;四、&#34;&gt;&lt;/a&gt;四、&lt;/h2&gt;</content>
        <updated>2024-09-16T14:37:35.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2024/09/08/Linux%E5%9F%BA%E7%A1%80%EF%BC%881%EF%BC%89%EF%BC%9Avim%E7%A8%8B%E5%BA%8F%E7%BC%96%E8%BE%91%E5%99%A8/</id>
        <title>Linux基础（1）：vim程序编辑器</title>
        <link rel="alternate" href="http://example.com/2024/09/08/Linux%E5%9F%BA%E7%A1%80%EF%BC%881%EF%BC%89%EF%BC%9Avim%E7%A8%8B%E5%BA%8F%E7%BC%96%E8%BE%91%E5%99%A8/"/>
        <content type="html">&lt;p&gt;Linux的熟练应用对高性能计算领域而言是非常重要的，由于博主已自学过一点点Linux的基本命令，故本文将直接从vim程序编辑器开始记录学习，在学习的过程中夯实基本命令。在此，也默认虚拟机等必要环境都已配备完毕，接下来我将以VMware虚拟机环境下的CentOS 7系统为例，并搭配MobaXterm远程计算工具箱进行学习。本博客的参考资料为鸟哥的《Linux私房菜：基础版》以及黑马程序员的Linux课程笔记（主要用于基本命令的查阅）。&lt;/p&gt;
&lt;h1 id=&#34;vim程序编辑器&#34;&gt;&lt;a href=&#34;#vim程序编辑器&#34; class=&#34;headerlink&#34; title=&#34;vim程序编辑器&#34;&gt;&lt;/a&gt;vim程序编辑器&lt;/h1&gt;&lt;h2 id=&#34;三种工作模式&#34;&gt;&lt;a href=&#34;#三种工作模式&#34; class=&#34;headerlink&#34; title=&#34;三种工作模式&#34;&gt;&lt;/a&gt;三种工作模式&lt;/h2&gt;&lt;p&gt;我们将以test.txt文件为例，介绍vi的三种模式，首先我们进入文档文件夹，新建一个test.txt的文件。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i-blog.csdnimg.cn/direct/af908313fe0a4148820cdb32a147f2da.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;①指令模式（command mode）&lt;/p&gt;
&lt;p&gt;默认模式，左下角会显示文件名，以及文本行数和字符数，可以进行复制粘贴、删除内容，通过键盘移动光标等操作。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i-blog.csdnimg.cn/direct/99251ac59eca428abb96fd3764bcc4ab.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;②编辑模式 （insert mode）&lt;/p&gt;
&lt;p&gt;按下特定字母后，会进入编辑模式，此时，左下角显示”–INSERT–”，相关特定字母对应的操作如下表所示，按ESC即可退出到指令模式。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i-blog.csdnimg.cn/direct/8ee8245adc0549fa93e9f9a4b25cc49f.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;命令&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;i&lt;/p&gt;
&lt;p&gt;在当前光标位置进入输入模式&lt;/p&gt;
&lt;p&gt;I&lt;/p&gt;
&lt;p&gt;在当前行的开头进入输入模式&lt;/p&gt;
&lt;p&gt;a&lt;/p&gt;
&lt;p&gt;在当前光标位置之后进入输入模式&lt;/p&gt;
&lt;p&gt;A&lt;/p&gt;
&lt;p&gt;在当前行的结尾进入输入模式&lt;/p&gt;
&lt;p&gt;o&lt;/p&gt;
&lt;p&gt;在当前光标下一行进入输入模式&lt;/p&gt;
&lt;p&gt;O&lt;/p&gt;
&lt;p&gt;在当前光标上一行进入输入模式&lt;/p&gt;
&lt;p&gt;③命令行模式 （command-line mode）&lt;/p&gt;
&lt;p&gt;在&lt;strong&gt;指令模式&lt;/strong&gt;下，输入”&amp;#x2F;:?””三个中的任何一个字符，即可进入命令行模式，完成读取、储存等额外功能，此处以”:wq”为例，展示其保存退出并保存的功能。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i-blog.csdnimg.cn/direct/0e35cef109284f7cbc1ca8260f50a215.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i-blog.csdnimg.cn/direct/a16bc1ed0929467a8f3ce4823ededa2d.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;至此，vi的三种模式已全部介绍完毕，更多按键功能表请自行查阅~&lt;/p&gt;
&lt;h2 id=&#34;vim的暂存功能&#34;&gt;&lt;a href=&#34;#vim的暂存功能&#34; class=&#34;headerlink&#34; title=&#34;vim的暂存功能&#34;&gt;&lt;/a&gt;vim的暂存功能&lt;/h2&gt;&lt;p&gt;使用vim编辑文件实际是先copy一份临时文件并映射到内存给你编辑，编辑的是临时文件。当多用户同时编译或vim因不明原因发生中断时，暂存档将不会消失，它会以隐藏文件的形式存入当前文件夹，输入ll -a即可查看。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i-blog.csdnimg.cn/direct/5fb92213bf874e7eb2fd6949174df886.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;ps:原本以为vi也有暂存功能，看到后面才知道，原来目前大部分的 distributions 都以 vim 取代 vi 的功能了（&amp;#x2F;捂脸）&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i-blog.csdnimg.cn/direct/75f5185f2d6043e6bdfb06825d4b825f.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;vim的额外功能&#34;&gt;&lt;a href=&#34;#vim的额外功能&#34; class=&#34;headerlink&#34; title=&#34;vim的额外功能&#34;&gt;&lt;/a&gt;vim的额外功能&lt;/h2&gt;&lt;h3 id=&#34;区块选择&#34;&gt;&lt;a href=&#34;#区块选择&#34; class=&#34;headerlink&#34; title=&#34;区块选择&#34;&gt;&lt;/a&gt;区块选择&lt;/h3&gt;&lt;p&gt;下图是一个动物园区域规划，动物园分为三个区域，位于同一个区域的不同动物要分居左右两侧，现在想要实现在红框中标明这些动物在哪个区域，要怎么办呢？&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i-blog.csdnimg.cn/direct/ada688c85042437dbf1a5d302498647f.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;没错，这便要用到区块选择的功能，其对应的功能表如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i-blog.csdnimg.cn/direct/290e49bf9bb1483a8af95b21c384122d.png&#34;&gt;&lt;/p&gt;
&lt;p&gt; 按下ctrl+v左下角出现”– VISUAL BLOCK –”字样，通过&lt;strong&gt;键盘移动光标&lt;/strong&gt;选中区块，按y复制，再通过编辑模式输入空格移动光标至指定位置后，回到指令模式按p粘贴即可。&lt;/p&gt;
&lt;p&gt;​      &lt;img loading=&#34;lazy&#34; data-src=&#34;https://i-blog.csdnimg.cn/direct/267c7908deea4949ba6740b1418be7e3.png&#34;&gt;                    &lt;img loading=&#34;lazy&#34; data-src=&#34;https://i-blog.csdnimg.cn/direct/9fabc642a312491ba35fdf073fe70f92.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;多文件编辑&#34;&gt;&lt;a href=&#34;#多文件编辑&#34; class=&#34;headerlink&#34; title=&#34;多文件编辑&#34;&gt;&lt;/a&gt;多文件编辑&lt;/h3&gt;&lt;p&gt;先通过vim animal food指令打开两个文件，分别为动物园区域规划和喂养动物所匹配的食物，现在要在food文件中，实现每一种食物都与animal文件中的动物相匹配。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i-blog.csdnimg.cn/direct/9ab0fd6dcd2e4175a4cc333001812da9.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;在命令行模式下输入:files可以看到我们已经打开了两个文件，其中animal文件正在被编辑（%a），按任意键可返回指令模式。&lt;/p&gt;
&lt;p&gt; 之后把光标移动至第一行第一列，直接输入11yy复制前11列（这里鸟哥的教参出错了，&lt;strong&gt;nyy是复制n行，不是n列，&lt;/strong&gt;推荐使用区块选择功能），再输入:n进入下一个文件，即food文件，指令模式下输入$（这里也是，鸟哥的教参用的是G，&lt;strong&gt;G指令是移动到最后一行，而不是最后一列&lt;/strong&gt;），将光标移动至最后一列（可有可无，也可以直接进入编辑模式操作，还能加俩空格更好看，只是这样更快捷），输入p完成粘贴。（以上出错内容位于教参的P473）&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i-blog.csdnimg.cn/direct/0f4855d527a549f087879cbe7a062ab8.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;多窗口功能&#34;&gt;&lt;a href=&#34;#多窗口功能&#34; class=&#34;headerlink&#34; title=&#34;多窗口功能&#34;&gt;&lt;/a&gt;多窗口功能&lt;/h3&gt;&lt;p&gt; 主要是用于方便前后对照使用，如下图sudoers文件中，可以实现连续阅读（找不到合适的文件进行说明，单单这功能的话还是比较鸡肋的，毕竟单窗口也能解决），主要还是用于后面需要前面的数据支撑，进行查阅使用。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i-blog.csdnimg.cn/direct/a875551ac7344b428c9f8d5e61d8ce44.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;其具体的操作不再赘述，详细功能表如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i-blog.csdnimg.cn/direct/244212c508d646b897a83faf46599f03.png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;挑字补全功能&#34;&gt;&lt;a href=&#34;#挑字补全功能&#34; class=&#34;headerlink&#34; title=&#34;挑字补全功能&#34;&gt;&lt;/a&gt;挑字补全功能&lt;/h4&gt;&lt;p&gt; 其功能表如下图所示，因bash自带补全一键补全功能，在此不再赘述O(∩_∩)O~~&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i-blog.csdnimg.cn/direct/8e6472fb2a914318a2f5e1806e1ecaa0.png&#34;&gt;&lt;/p&gt;
</content>
        <category term="Linux" />
        <category term="vim程序编辑器" />
        <category term="高性能计算" />
        <updated>2024-09-08T15:13:23.000Z</updated>
    </entry>
</feed>
